[{"chunk_id":1,"content":"// Package settings provides prompt settings for the test generation\npackage settings\n\nimport (\n\t\"bytes\"\n\t\"embed\"\n\t\"log\"\n\t\"sync\"\n\n\t\"github.com/spf13/viper\"\n)\n\n// SingletonSettings manages the singleton instance of the configuration settings\ntype SingletonSettings struct {\n\tviper *viper.Viper\n}\n\nvar instance *SingletonSettings\nvar once sync.Once\n\n//go:embed *.toml\nvar settings embed.FS\n\n// NewSingletonSettings initializes the singleton settings instance\nfunc NewSingletonSettings() *SingletonSettings {\n\tonce.Do(func() {\n\n\t\tsettingsFiles := []string{\n\t\t\t\"test_generation.toml\",\n\t\t\t\"language.toml\",\n\t\t\t\"indentation.toml\",\n\t\t\t\"insert_line.toml\",\n\t\t\t\"refactor_prompt.toml\",\n\t\t}\n\n\t\tv := viper.New()\n\t\tv.SetConfigType(\"toml\")\n\t\tfor _, file := range settingsFiles {\n\t\t\tfileContent, err := settings.ReadFile(file)\n\t\t\tif err != nil {\n\t\t\t\tlog.Fatalf(\"Failed to read settings file %s: %v\", file, err)\n\t\t\t}\n\t\t\tv.SetConfigFile(file)\n\t\t\tif err := v.MergeConfig(bytes.NewBuffer(fileContent)); err != nil {\n\t\t\t\tlog.Fatalf(\"Error loading config file : %v\", err)\n\t\t\t}\n\t\t}\n\n\t\tinstance = \u0026SingletonSettings{\n\t\t\tviper: v,\n\t\t}\n\t})\n\treturn instance\n}\n\n// GetSettings returns the singleton settings instance\nfunc GetSettings() *viper.Viper {\n\treturn NewSingletonSettings().viper\n}\n"}]