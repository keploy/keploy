name: Test Colima Support

on:
    push:
        branches: [main, develop]
    pull_request:
        branches: [main, develop]
    workflow_dispatch:

jobs:
    test-colima:
        runs-on: macos-13
        timeout-minutes: 45

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Checkout samples-go repository
              uses: actions/checkout@v4
              with:
                  repository: keploy/samples-go
                  path: samples-go

            - name: Install Docker CLI and Colima
              run: |
                  brew install docker colima

            - name: Start Colima
              run: |
                  # Use QEMU driver for GitHub Actions compatibility
                  colima start \
                    --cpu 2 \
                    --memory 4 \
                    --disk 10 \
                    --vm-type=qemu \
                    --mount-type=sshfs \
                    --dns=1.1.1.1
                  
                  # Verify Colima started
                  colima status

            - name: Verify Docker connectivity
              run: |
                  docker context ls
                  docker info
                  echo "Docker socket: $(docker context inspect colima -f '{{.Endpoints.docker.Host}}')"

            - name: Create Keploy network
              run: |
                  docker network create keploy-network

            - name: Build gin-mongo sample app
              run: |
                  cd samples-go/gin-mongo
                  docker build -t gin-mongo:test .

            - name: Start MongoDB
              run: |
                  docker run -d --name mongoDb \
                    --network keploy-network \
                    -p 27017:27017 \
                    mongo

            - name: Wait for MongoDB to be ready
              run: |
                  echo "Waiting for MongoDB..."
                  for i in {1..30}; do
                    if docker exec mongoDb mongosh --eval 'db.runCommand({ ping: 1 })' &>/dev/null; then
                      echo "MongoDB is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "MongoDB failed to start"
                      docker logs mongoDb
                      exit 1
                    fi
                    sleep 1
                  done

            - name: Record with Keploy (Iteration 1)
              run: |
                  cd samples-go/gin-mongo
                  
                  # Start recording in background
                  docker run --name keploy-rec-1 \
                    --privileged \
                    --pid=host \
                    -p 16789:16789 \
                    -v "$(pwd):$(pwd)" \
                    -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v "$HOME/.colima/default/docker.sock":/var/run/docker.sock \
                    ghcr.io/keploy/keploy:latest \
                    record -c "docker run -p 8080:8080 --name gin-app-1 --network keploy-network --rm gin-mongo:test" \
                    --containerName gin-app-1 \
                    --delay 10 &
                  
                  KEPLOY_PID=$!
                  sleep 5
                  
                  # Wait for app
                  echo "Waiting for app..."
                  for i in {1..30}; do
                    if curl -s http://localhost:8080/ &>/dev/null; then
                      echo "App is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "App failed to start"
                      docker logs gin-app-1 || true
                      exit 1
                    fi
                    sleep 1
                  done
                  
                  # Generate traffic
                  echo "Generating traffic..."
                  curl -X POST http://localhost:8080/url \
                    -H "Content-Type: application/json" \
                    -d '{"url":"https://google.com"}'
                  
                  sleep 2
                  
                  curl -X POST http://localhost:8080/url \
                    -H "Content-Type: application/json" \
                    -d '{"url":"https://github.com"}'
                  
                  sleep 5
                  
                  # Stop Keploy
                  echo "Stopping Keploy..."
                  kill -SIGINT $KEPLOY_PID || true
                  timeout 15 wait $KEPLOY_PID || kill -9 $KEPLOY_PID 2>/dev/null || true
                  
                  docker stop gin-app-1 || true
                  docker logs keploy-rec-1 --tail 50 || true

            - name: Record with Keploy (Iteration 2)
              run: |
                  cd samples-go/gin-mongo
                  
                  docker run --name keploy-rec-2 \
                    --privileged \
                    --pid=host \
                    -p 16789:16789 \
                    -v "$(pwd):$(pwd)" \
                    -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v "$HOME/.colima/default/docker.sock":/var/run/docker.sock \
                    ghcr.io/keploy/keploy:latest \
                    record -c "docker run -p 8080:8080 --name gin-app-2 --network keploy-network --rm gin-mongo:test" \
                    --containerName gin-app-2 \
                    --delay 10 &
                  
                  KEPLOY_PID=$!
                  sleep 5
                  
                  echo "Waiting for app..."
                  for i in {1..30}; do
                    if curl -s http://localhost:8080/ &>/dev/null; then
                      echo "App is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "App failed to start"
                      docker logs gin-app-2 || true
                      exit 1
                    fi
                    sleep 1
                  done
                  
                  echo "Generating traffic..."
                  curl -X POST http://localhost:8080/url \
                    -H "Content-Type: application/json" \
                    -d '{"url":"https://facebook.com"}'
                  
                  sleep 2
                  
                  curl -X POST http://localhost:8080/url \
                    -H "Content-Type: application/json" \
                    -d '{"url":"https://twitter.com"}'
                  
                  sleep 5
                  
                  echo "Stopping Keploy..."
                  kill -SIGINT $KEPLOY_PID || true
                  timeout 15 wait $KEPLOY_PID || kill -9 $KEPLOY_PID 2>/dev/null || true
                  
                  docker stop gin-app-2 || true
                  docker logs keploy-rec-2 --tail 50 || true

            - name: Verify testcases were recorded
              run: |
                  cd samples-go/gin-mongo

                  if [ ! -d "./keploy" ]; then
                    echo "Error: keploy directory not created"
                    exit 1
                  fi

                  if ! ls ./keploy/test-set-*/test-*.yaml 1> /dev/null 2>&1; then
                    echo "Error: No testcases found"
                    find ./keploy -type f || true
                    exit 1
                  fi

                  echo "Testcases recorded successfully:"
                  find ./keploy -name "*.yaml" -type f

            - name: Stop MongoDB before test mode
              run: |
                  echo "Shutting down MongoDB - Keploy should use mocks"
                  docker stop mongoDb || true
                  docker rm mongoDb || true

            - name: Test with Keploy
              run: |
                  cd samples-go/gin-mongo
                  
                  docker run --name keploy-test \
                    --privileged \
                    --pid=host \
                    -p 16789:16789 \
                    -v "$(pwd):$(pwd)" \
                    -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v "$HOME/.colima/default/docker.sock":/var/run/docker.sock \
                    ghcr.io/keploy/keploy:latest \
                    test -c "docker run -p 8080:8080 --
