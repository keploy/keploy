name: Test Colima Support

on:
    push:
        branches: [main]
    pull_request:
        branches: [main]
    workflow_dispatch:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
    test-colima:
        runs-on: macos-13
        timeout-minutes: 30

        steps:
            - name: Checkout repository
              uses: actions/checkout@v4

            - name: Install Docker CLI and Colima
              run: |
                  brew install docker colima

            - name: Start Colima
              run: |
                  colima start --cpu 2 --memory 4 --disk 10

            - name: Verify Docker connectivity
              run: |
                  docker context ls
                  docker info

            - name: Create Keploy network
              run: |
                  docker network inspect keploy-network >/dev/null 2>&1 || docker network create keploy-network

            - name: Create test app
              run: .github/workflows/test_workflow_scripts/test-colima-support.sh
                  

            - name: Set up Docker Buildx
              uses: docker/setup-buildx-action@v3

            - name: Build test app (cached) and pre-pull Keploy in parallel
              run: |
                docker pull ghcr.io/keploy/keploy:v2.11.12 &  # pin for stability
                PULL_PID=$!

                cd test-app
                docker buildx build \
                  --load \
                  --tag test-app:colima \
                  --cache-from type=gha \
                  --cache-to type=gha,mode=max \
                  .

                wait $PULL_PID

            - name: Record with Keploy (Iteration 1)
              run: |
                  cd test-app

                  # Start Keploy in record mode
                  docker run --name keploy-record-1 \
                    --privileged --pid=host -p 16789:16789 \
                    -v "$(pwd):$(pwd)" -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ghcr.io/keploy/keploy:latest \
                    record -c "docker run -p 8080:8080 --name test-app-1 --network keploy-network --rm test-app:colima" \
                    --container-name test-app-1 \
                    --keploy-container keploy-record-1 \
                    --record-timer 20s \
                    --in-ci &
                    
                  KEPLOY_PID=$!

                  # Wait for app to be ready
                  echo "Waiting for app to start..."
                  for i in {1..30}; do
                    if docker exec keploy-record-1 curl -s http://test-app-1:8080/health &>/dev/null; then
                      echo "App is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "App failed to start"
                      docker logs test-app-1 || true
                      docker logs keploy-record-1 || true
                      exit 1
                    fi
                    sleep 1
                  done

                  # Generate traffic
                  docker exec keploy-record-1 curl -X POST http://test-app-1:8080/items \
                    -H "Content-Type: application/json" \
                    -d '{"key":"test1","value":"value1"}'

                  sleep 2

                  docker exec keploy-record-1 curl -X GET http://test-app-1:8080/items

                  sleep 2

                  docker exec keploy-record-1 curl -X GET http://test-app-1:8080/health

                  sleep 5

                  # Stop Keploy gracefully
                  echo "Stopping Keploy..."
                  kill -SIGINT $KEPLOY_PID || true
                  sleep 15  # Give it time to shut down gracefully
                  kill -9 $KEPLOY_PID 2>/dev/null || true

                  docker stop test-app-1 2>/dev/null || true

                  # Verify testcases created
                  sleep 2
                  if ! ls ./keploy/test-set-0/tests/test-*.yaml 1> /dev/null 2>&1; then
                    echo "Iteration 1 failed: No testcases found"
                    ls -la ./keploy/ || true
                    docker logs keploy-record-1 || true
                    exit 1
                  fi
                  echo "Iteration 1: Testcases created"

            - name: Record with Keploy (Iteration 2)
              run: |
                  cd test-app

                  docker run --name keploy-record-2 \
                    --privileged --pid=host -p 16789:16789 \
                    -v "$(pwd):$(pwd)" -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ghcr.io/keploy/keploy:latest \
                    record -c "docker run -p 8080:8080 --name test-app-2 --network keploy-network --rm test-app:colima" \
                    --container-name test-app-2 \
                    --keploy-container keploy-record-2 \
                    --record-timer 20s \
                    --in-ci &

                  KEPLOY_PID=$!

                  echo "Waiting for app to start..."
                  for i in {1..30}; do
                    if docker exec keploy-record-2 curl -s http://test-app-2:8080/health &>/dev/null; then
                      echo "App is ready!"
                      break
                    fi
                    if [ $i -eq 30 ]; then
                      echo "App failed to start"
                      docker logs test-app-2 || true
                      docker logs keploy-record-2 || true
                      exit 1
                    fi
                    sleep 1
                  done

                  docker exec keploy-record-2 curl -X POST http://test-app-2:8080/items \
                    -H "Content-Type: application/json" \
                    -d '{"key":"test2","value":"value2"}'

                  sleep 2

                  docker exec keploy-record-2 curl -X GET http://test-app-2:8080/items

                  sleep 5

                  echo "Stopping Keploy..."
                  kill -SIGINT $KEPLOY_PID || true
                  sleep 15  # Give it time to shut down gracefully
                  kill -9 $KEPLOY_PID 2>/dev/null || true

                  docker stop test-app-2 2>/dev/null || true

                  sleep 2
                  if ! ls ./keploy/test-set-1/tests/test-*.yaml 1> /dev/null 2>&1; then
                    echo "Iteration 2 failed: No testcases found"
                    ls -la ./keploy/ || true
                    docker logs keploy-record-2 || true
                    exit 1
                  fi
                  echo "Iteration 2: Testcases created"

            - name: Verify testcases were recorded
              run: |
                  cd test-app

                  if [ ! -d "./keploy" ]; then
                    echo "Error: keploy directory not created"
                    exit 1
                  fi

                  if ! ls ./keploy/test-set-*/tests/test-*.yaml 1> /dev/null 2>&1; then
                    echo "Error: No testcases found"
                    ls -la ./keploy/ || true
                    exit 1
                  fi

                  echo "Testcases recorded successfully:"
                  find ./keploy -name "*.yaml" -type f

            - name: Test with Keploy
              run: |
                  cd test-app

                  docker run --name keploy-test \
                    --privileged --pid=host -p 16789:16789 \
                    -v "$(pwd):$(pwd)" -w "$(pwd)" \
                    -v /sys/fs/cgroup:/sys/fs/cgroup \
                    -v /sys/kernel/debug:/sys/kernel/debug \
                    -v /sys/fs/bpf:/sys/fs/bpf \
                    -v /var/run/docker.sock:/var/run/docker.sock \
                    ghcr.io/keploy/keploy:v2.11.12 \
                    test -c "docker run -p 8080:8080 --name test-app-test --network keploy-network --rm test-app:colima" \
                    --container-name test-app-test \
                    --keploy-container keploy-test \
                    --delay 10 \
                    --in-ci

            - name: Verify test reports
              run: |
                  cd test-app

                  if ! find ./keploy/reports -name "*-report.yaml" -type f | grep -q .; then
                      echo "Error: No test report found"
                      ls -laR ./keploy/reports/ || true
                      exit 1
                  fi

                  echo "Test reports generated:"
                  find ./keploy/reports -name "*-report.yaml" -type f

                  # Check test status
                  all_passed=true
                  for report_file in ./keploy/reports/test-run-*/*-report.yaml; do
                    if [ -f "$report_file" ]; then
                      test_status=$(grep 'status:' "$report_file" | head -n 1 | awk '{print $2}')
                      test_name=$(basename "$(dirname "$report_file")")/$(basename "$report_file")
                      echo "Test status for $test_name: $test_status"
                      if [ "$test_status" != "PASSED" ]; then
                        all_passed=false
                        echo "Failed test details:"
                        cat "$report_file"
                      fi
                    fi
                  done

                  if [ "$all_passed" = false ]; then
                    echo "Some tests failed"
                    exit 1
                  fi

                  echo "All tests passed - Colima support verified!"

            - name: Upload Keploy artifacts
              if: always()
              uses: actions/upload-artifact@v4
              with:
                  name: keploy-colima-test-results
                  path: test-app/keploy/
                  retention-days: 7

            - name: Cleanup
              if: always()
              run: |
                  docker stop test-app-1 test-app-2 test-app-test keploy-record-1 keploy-record-2 keploy-test 2>/dev/null || true
                  docker rm test-app-1 test-app-2 test-app-test keploy-record-1 keploy-record-2 keploy-test 2>/dev/null || true
                  docker network rm keploy-network 2>/dev/null || true
                  colima stop || true
