name: Fuzzer Tests On Linux

on:
  workflow_call:
    secrets:
      AWS_SECRET_ACCESS_KEY:
        required: true
    inputs:
      runner:
        description: 'The type of runner to use for this job'
        type: string
        required: false
        default: 'ubuntu-latest' # Keep a sensible default
      jobs-to-run:
        description: 'Comma-separated list of jobs to run, or "all"'
        type: string
        required: false
        default: 'all' # Default to running all jobs


jobs:
  rerecord_fuzzer:
    if: ${{ inputs.jobs-to-run == 'all' || contains(inputs.jobs-to-run, 'rerecord_fuzzer') }}
    runs-on: ${{ inputs.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - job: record_latest_rerecord_build
            record_src: latest
            rerecord_src: build
            replay_src: build
          - job: record_build_rerecord_latest
            record_src: build
            rerecord_src: latest
            replay_src: latest
          - job: record_build_rerecord_build
            record_src: build
            rerecord_src: build
            replay_src: build

    name: Rerecord Fuzzer (${{ matrix.config.job }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: keploy/keploy
          ref: reusable-workflow

      # These steps download the 'build' artifact (with race detector) by default
      - name: Download Keploy Binary (for Record)
        id: record_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - name: Download Keploy Binary (for Rerecord)
        id: rerecord_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.rerecord_src }}
      
      - name: Download Keploy Binary (for Replay)
        id: replay_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Download and Extract Rerecord Fuzzer
        id: rerecord_fuzzer
        run: |
          set -euo pipefail
          KEY="releases/rerecord-fuzzer/latest/rerecord-fuzzer-linux-amd64.tar.gz"
          echo "Downloading fuzzer from s3://${{ vars.AWS_S3_BUCKET }}/${KEY}"
          aws s3 cp "s3://${{ vars.AWS_S3_BUCKET }}/${KEY}" .
          tar -xzf rerecord-fuzzer-linux-amd64.tar.gz
          chmod +x ./rerecord-client ./rerecord-server
          echo "client=$(realpath ./rerecord-client)" >> $GITHUB_OUTPUT
          echo "server=$(realpath ./rerecord-server)" >> $GITHUB_OUTPUT

      - name: Run Rerecord Fuzzer Test
        env:
          RECORD_KEPLOY_BIN:    ${{ steps.record_keploy.outputs.path }}
          REPLAY_KEPLOY_BIN:    ${{ steps.replay_keploy.outputs.path }}
          RERECORD_KEPLOY_BIN:  ${{ steps.rerecord_keploy.outputs.path }}
          RERECORD_CLIENT_BIN:  ${{ steps.rerecord_fuzzer.outputs.client }}
          RERECORD_SERVER_BIN:  ${{ steps.rerecord_fuzzer.outputs.server }}
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/rerecord/golang-linux.sh
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/rerecord/golang-linux.sh

  mysql_fuzzer:
    if: ${{ inputs.jobs-to-run == 'all' || contains(inputs.jobs-to-run, 'mysql_fuzzer') }}
    runs-on: ${{ inputs.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - job: record_latest_replay_build
            record_src: latest
            replay_src: build-no-race
          - job: record_build_replay_latest
            record_src: build-no-race
            replay_src: latest
          - job: record_build_replay_build
            record_src: build-no-race
            replay_src: build-no-race

    name: MySQL Fuzzer (${{ matrix.config.job }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: keploy/keploy
          ref: reusable-workflow

      - name: Download Keploy Binary (for Record)
        id: record_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - name: Download Keploy Binary (for Replay)
        id: replay_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Download and Extract MySQL Fuzzer
        id: mysql_fuzzer
        run: |
          set -e
          KEY="releases/mysql-fuzzer/latest/mysql-fuzzer-linux-amd64.tar.gz"
          aws s3 cp "s3://${{ vars.AWS_S3_BUCKET }}/${KEY}" .
          tar -xzf mysql-fuzzer-linux-amd64.tar.gz
          chmod +x ./mysql-fuzzer
          echo "path=$(realpath ./mysql-fuzzer)" >> $GITHUB_OUTPUT

      - name: Run MySQL Fuzzer Test
        env:
          RECORD_KEPLOY_BIN:    ${{ steps.record_keploy.outputs.path }}
          REPLAY_KEPLOY_BIN:    ${{ steps.replay_keploy.outputs.path }}
          MYSQL_FUZZER_BIN:     ${{ steps.mysql_fuzzer.outputs.path }}
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/mysql/golang-linux.sh
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/mysql/golang-linux.sh

  grpc_fuzzer:
    if: ${{ inputs.jobs-to-run == 'all' || contains(inputs.jobs-to-run, 'grpc_fuzzer') }}
    runs-on: ${{ inputs.runner }}
    strategy:
      fail-fast: false
      matrix:
        mode: [incoming, outgoing]
        config:
          - job: record_latest_replay_build
            record_src: latest
            replay_src: build-no-race
          - job: record_build_replay_latest
            record_src: build-no-race
            replay_src: latest
          - job: record_build_replay_build
            record_src: build-no-race
            replay_src: build-no-race

    name: gRPC Fuzzer ${{ matrix.mode }} (${{ matrix.config.job }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: keploy/keploy
          ref: reusable-workflow

      - name: Download Binary (for Record)
        id: record
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - name: Download Binary (for Replay)
        id: replay
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}

      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Download and Extract gRPC Fuzzer
        id: fuzzer
        run: |
          set -euo pipefail
          KEY="releases/grpc-fuzzer/latest/grpc-fuzzer-linux-amd64.tar.gz"
          echo "Downloading fuzzer from s3://${{ vars.AWS_S3_BUCKET }}/${KEY}"
          aws s3 cp "s3://${{ vars.AWS_S3_BUCKET }}/${KEY}" .
          tar -xzf grpc-fuzzer-linux-amd64.tar.gz
          chmod +x ./client ./server
          echo "client=$(realpath ./client)" >> $GITHUB_OUTPUT
          echo "server=$(realpath ./server)" >> $GITHUB_OUTPUT

      - name: Run gRPC Fuzzer test
        env:
          RECORD_BIN: ${{ steps.record.outputs.path }}
          REPLAY_BIN: ${{ steps.replay.outputs.path }}
          FUZZER_CLIENT_BIN: ${{ steps.fuzzer.outputs.client }}
          FUZZER_SERVER_BIN: ${{ steps.fuzzer.outputs.server }}
          RECORD_SRC: ${{ matrix.config.record_src }}
          REPLAY_SRC: ${{ matrix.config.replay_src }}
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/grpc/golang-linux.sh
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/grpc/golang-linux.sh ${{ matrix.mode }}
  
  postgres_fuzzer:
    if: ${{ inputs.jobs-to-run == 'all' || contains(inputs.jobs-to-run, 'postgres_fuzzer') }}
    runs-on: ${{ inputs.runner }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - job: record_latest_replay_build
            record_src: latest
            replay_src: build-no-race
          - job: record_build_replay_latest
            record_src: build-no-race
            replay_src: latest
          - job: record_build_replay_build
            record_src: build-no-race
            replay_src: build-no-race

    name: Postgres Fuzzer (${{ matrix.config.job }})
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          repository: keploy/keploy
          ref: reusable-workflow # needed because script for postgres fuzzer is only present in this branch before merge

      - name: Download Keploy Binary (for Record)
        id: record_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.record_src }}

      - name: Download Keploy Binary (for Replay)
        id: replay_keploy
        uses: ./.github/actions/download-binary
        with:
          src: ${{ matrix.config.replay_src }}

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-access-key-id: ${{ vars.AWS_ACCESS_KEY_ID }}
          aws-region: ${{ vars.AWS_DEFAULT_REGION }}
      
      - name: Install AWS CLI
        run: |
          curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
          unzip awscliv2.zip
          sudo ./aws/install

      - name: Download and Extract Postgres Fuzzer
        id: postgres_fuzzer
        run: |
          set -e
          KEY="releases/postgres-fuzzer/latest/postgres-fuzzer-linux-amd64.tar.gz"
          aws s3 cp "s3://${{ vars.AWS_S3_BUCKET }}/${KEY}" .
          tar -xzf postgres-fuzzer-linux-amd64.tar.gz
          chmod +x ./postgres-fuzzer
          echo "path=$(realpath ./postgres-fuzzer)" >> $GITHUB_OUTPUT

      - name: Run Postgres Fuzzer Test
        env:
          RECORD_KEPLOY_BIN:    ${{ steps.record_keploy.outputs.path }}
          REPLAY_KEPLOY_BIN:    ${{ steps.replay_keploy.outputs.path }}
          POSTGRES_FUZZER_BIN:  ${{ steps.postgres_fuzzer.outputs.path }}
        run: |
          chmod +x $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/postgres/golang-linux.sh
          source $GITHUB_WORKSPACE/.github/workflows/test_workflow_scripts/fuzzer/postgres/golang-linux.sh
