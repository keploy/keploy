name: Prepare Binary and Run Workflows (Windows)
on:
  pull_request:
    branches: [main]

jobs:
  build-and-upload:
    runs-on: [self-hosted, Windows, X64]
    steps:
      - name: Clean up git config (ensure HTTPS for checkout)
        if: always()
        continue-on-error: true
        shell: powershell
        run: |
          git config --global --unset-all url."git@github.com:".insteadof  2>$null
          git config --global --unset-all url."ssh://git@github.com/".insteadof  2>$null
          git config --global --unset-all core.sshCommand  2>$null
          git config --global --list

      - name: Configure Git EOL on Windows
        shell: powershell
        run: |
          git config --global core.autocrlf false
          git config --global core.eol lf

      - name: Checkout Repository
        uses: actions/checkout@v4
        with:
          persist-credentials: false
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: ">=1.23"

      - name: Build Keploy (PR) - Windows (windows/amd64)
        shell: powershell
        run: |
          $env:GOOS = "windows"
          $env:GOARCH = "amd64"
          $env:CGO_ENABLED = "0"
          go build -tags=viper_bind_struct -o keploy.exe ./main.go

      - name: Upload build artifact (Windows CLI)
        uses: actions/upload-artifact@v4
        with: 
          name: build
          path: keploy.exe

      - name: Clean up git config
        if: always()
        continue-on-error: true
        shell: powershell
        run: |
          git config --global --unset url."git@github.com:".insteadOf

  docker-image-build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set PR image tag
        run: echo "PR_IMAGE_TAG=ghcr.io/${GITHUB_REPOSITORY}:pr-${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Build a single-platform linux/amd64 image and export to a local tarball
      - name: Build PR Docker image (linux/amd64) -> tar
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: linux/amd64
          push: false
          tags: ${{ env.PR_IMAGE_TAG }}
          outputs: type=docker,dest=keploy-image-pr.tar

      - name: Upload PR Docker image artifact
        uses: actions/upload-artifact@v4
        with:
          name: docker-build
          path: keploy-image-pr.tar

  # upload-latest:
  #   runs-on: [self-hosted, Windows, X64]
  #   steps:
  #     - name: Download latest release (Windows)
  #       shell: powershell
  #       run: |
  #         # Get latest release tag
  #         $response = Invoke-RestMethod -Uri "https://api.github.com/repos/keploy/keploy/releases/latest"
  #         $latest = $response.tag_name
  #         Write-Host "Latest version: $latest"
          
  #         # Download Windows tar.gz
  #         $url = "https://github.com/keploy/keploy/releases/download/$latest/keploy_windows_amd64.tar.gz"
  #         Write-Host "Downloading from: $url"
          
  #         Invoke-WebRequest -Uri $url -OutFile "keploy.tar.gz"
          
  #         tar -xzf keploy.tar.gz
  #         if (Test-Path "keploy") { Move-Item "keploy" "keploy.exe" }

  #     - name: Upload latest artifact (Windows CLI)
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: latest
  #         path: keploy.exe

  #     - name: Download & save latest Docker image
  #       shell: pwsh
  #       run: |
  #         $response = Invoke-RestMethod -Uri "https://api.github.com/repos/keploy/keploy/releases/latest"
  #         $latest = $response.tag_name
  #         Write-Host "Pulling ghcr.io/keploy/keploy:$latest"
  #         docker pull ghcr.io/keploy/keploy:$latest
  #         docker save ghcr.io/keploy/keploy:$latest -o keploy-image-latest.tar

  #     - name: Upload latest Docker image artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: docker-latest
  #         path: keploy-image-latest.tar

  run_golang_docker_windows:
    # needs: [build-and-upload, docker-image-build, upload-latest]
    needs: [build-and-upload, docker-image-build]
    uses: ./.github/workflows/golang_docker_windows.yml
