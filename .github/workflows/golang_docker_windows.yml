name: Golang On Docker (Windows)
on:
  workflow_call:

jobs:
  golang_docker_windows:
    runs-on: [self-hosted, Windows, X64]
    strategy:
      fail-fast: false
      matrix:
        app:
          - name: go-dedup
            path: go-dedup
            script_dir: go-dedup
        config:
          - job: record_build_replay_build
            record_src: build
            replay_src: build

    name: ${{ matrix.app.name }} (${{ matrix.config.job }}) (Windows)
    steps:
      - name: Aggressive Cleanup (Runner + Docker)  # ⚠️ Destructive
        if: always()
        shell: pwsh
        continue-on-error: true
        run: |
          Write-Host "== Kill stray Keploy processes =="
          $procs = 'keploy.exe','keploy-record.exe','keploy-replay.exe','keploy-record','keploy-replay'
          foreach ($p in $procs) {
            cmd /c "taskkill /F /IM $p /T" 2>$null | Out-Null
          }

          Write-Host "== Docker cleanup (containers/images/volumes/networks) =="
          # Stop/remove ALL containers (runner dedicated to CI)
          $all = docker ps -aq
          if ($all) { $all | ForEach-Object { docker rm -f $_ } 2>$null }

          # Anything started from keploy images (belt & suspenders)
          $anc = docker ps -a --filter "ancestor=ghcr.io/keploy/keploy" --format "{{.ID}}"
          if ($anc) { $anc | ForEach-Object { docker rm -f $_ } 2>$null }

          # Known names from samples / agent
          $names = @('keploy-v2','echoApp','ginMongoApp','grpcApp')
          foreach ($n in $names) {
            $cid = docker ps -a --filter "name=^/${n}$" --format "{{.ID}}"
            if ($cid) { docker rm -f $cid 2>$null | Out-Null }
          }

          # Volumes & networks commonly left behind
          docker volume rm -f debugfs 2>$null | Out-Null
          docker network rm keploy-network 2>$null | Out-Null

          # Prune everything (cache, images, volumes)
          docker builder prune -af 2>$null | Out-Null
          docker system prune -af --volumes 2>$null | Out-Null

          # Remove tags we re-create in this workflow
          docker rmi -f keploy:record keploy:replay ghcr.io/keploy/keploy:v2-dev 2>$null | Out-Null

          Write-Host "== Workspace cleanup =="
          $paths = @(
            '.\bin',
            '.\record-bin','.\replay-bin',
            '.\record-image','.\replay-image',
            '.\samples-go',
            '.\keploy','.\keploy.yml'
          )
          foreach ($p in $paths) {
            Remove-Item -LiteralPath $p -Recurse -Force -ErrorAction SilentlyContinue
          }
          # temp crumbs
          Get-ChildItem "$env:TEMP" -Filter "keploy*" -Recurse -Force -ErrorAction SilentlyContinue |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

      # (Optional) keep these, but they’re redundant with the cleanup above
      # - name: Prune Docker Builder Cache
      #   run: docker builder prune --all -f
      #   continue-on-error: true
      # - name: Prune Docker Volumes
      #   run: docker volume prune -f
      #   continue-on-error: true

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          clean: true

      # --- CLI binaries (same as before) ---
      # - name: Download Record Binary (${{ matrix.config.record_src }})
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ matrix.config.record_src }}
      #     path: record-bin

      # - name: Install Record Binary
      #   id: setup_record
      #   shell: pwsh
      #   run: |
      #     New-Item -Path "./bin" -ItemType Directory -Force | Out-Null
      #     Move-Item -Path ".\record-bin\keploy.exe" -Destination ".\bin\keploy-record.exe" -Force
      #     echo "$env:GITHUB_WORKSPACE/bin" >> $env:GITHUB_PATH
      #     echo "bin_name=keploy-record.exe" >> $env:GITHUB_OUTPUT

      # - name: Download Replay Binary (${{ matrix.config.replay_src }})
      #   uses: actions/download-artifact@v4
      #   with:
      #     name: ${{ matrix.config.replay_src }}
      #     path: replay-bin

      # - name: Install Replay Binary
      #   id: setup_replay
      #   shell: pwsh
      #   run: |
      #     New-Item -Path "./bin" -ItemType Directory -Force | Out-Null
      #     Move-Item -Path ".\replay-bin\keploy.exe" -Destination ".\bin\keploy-replay.exe" -Force
      #     echo "bin_name=keploy-replay.exe" >> $env:GITHUB_OUTPUT

      - name: Use local Keploy image for both record & replay
        id: use_local_img
        shell: pwsh
        run: |
          # find any ghcr.io/keploy/keploy:* image you preloaded (docker load -i keploy_docker.tar)
          $img = (docker images --format "{{.Repository}}:{{.Tag}}" |
                  Select-String "ghcr.io/keploy/keploy:" |
                  Select-Object -First 1).ToString()
          if (-not $img) {
            throw "Local Keploy image not found. Run 'docker load -i keploy_docker.tar' on this VM first."
          }
          docker tag $img keploy:record
          docker tag $img keploy:replay
          docker tag $img ghcr.io/keploy/keploy:v2-dev
          echo "image=keploy:record" >> $env:GITHUB_OUTPUT

      - name: Checkout the samples-go repository
        uses: actions/checkout@v4
        with:
          repository: keploy/samples-go
          path: samples-go
          clean: true

      - name: Docker works?
        run: |
          docker version
          docker run --rm hello-world

      # Your existing run step
      - name: Run ${{ matrix.app.name }} application (Windows)
        env:
          RECORD_BIN:  ${{ steps.setup_record.outputs.bin_name }}
          REPLAY_BIN:  ${{ steps.setup_replay.outputs.bin_name }}
          DOCKER_IMAGE_RECORD: ${{ steps.record_img.outputs.image }}
          DOCKER_IMAGE_REPLAY: ${{ steps.replay_img.outputs.image }}
        shell: pwsh
        run: |
          cd samples-go/${{ matrix.app.path }}
          & "$env:GITHUB_WORKSPACE\.github\workflows\test_workflow_scripts\golang\${{ matrix.app.script_dir }}\golang-docker-windows.ps1"

      - name: Clean up git config
        if: always()
        continue-on-error: true
        run: git config --global --unset url."git@github.com:".insteadOf
