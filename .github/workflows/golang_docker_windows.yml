name: Golang On Docker (Windows)
on:
  workflow_call:

jobs:
  golang_docker_windows:
    runs-on: [self-hosted, Windows, X64]
    strategy:
      fail-fast: false
      matrix:
        app:
          - name: gin-mongo
            path: gin-mongo
            script_dir: gin-mongo
        config:
          - job: record_build_replay_build
            record_src: build
            replay_src: build
          - job: record_build_replay_latest
            record_src: build
            replay_src: latest
          - job: record_latest_replay_build
            record_src: latest
            replay_src: build

    name: ${{ matrix.app.name }} (${{ matrix.config.job }}) (Windows)
    steps:

      - name: Prune Docker Builder Cache
        run: docker builder prune --all -f
        continue-on-error: true

      - name: Prune Docker Volumes
        run: docker volume prune -f
        continue-on-error: true

      - name: Clean up git config
        if: always()
        continue-on-error: true
        run: git config --global --unset url."git@github.com:".insteadOf

      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Download Record Binary (${{ matrix.config.record_src }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.config.record_src }}
          path: record-bin

      - name: Install Record Binary
        id: setup_record
        shell: pwsh
        run: |
          # Create a local bin directory
          New-Item -Path "./bin" -ItemType Directory -Force
          # Move the executable into our local bin directory
          Move-Item -Path ".\record-bin\keploy.exe" -Destination ".\bin\keploy-record.exe" -Force
          # Add the new bin directory to the PATH for subsequent steps
          echo "$env:GITHUB_WORKSPACE/bin" >> $env:GITHUB_PATH
          # Set the output for the next step
          echo "bin_name=keploy-record.exe" >> $env:GITHUB_OUTPUT

      - name: Download Replay Binary (${{ matrix.config.replay_src }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.config.replay_src }}
          path: replay-bin

      - name: Install Replay Binary
        id: setup_replay
        shell: pwsh
        run: |
          # The bin directory already exists, but -Force prevents errors
          New-Item -Path "./bin" -ItemType Directory -Force
          # Move the executable into our local bin directory
          Move-Item -Path ".\replay-bin\keploy.exe" -Destination ".\bin\keploy-replay.exe" -Force
          # Set the output for the next step
          echo "bin_name=keploy-replay.exe" >> $env:GITHUB_OUTPUT

      - name: Checkout the samples-go repository
        uses: actions/checkout@v4
        with:
          repository: keploy/samples-go
          path: samples-go

      - name: Run ${{ matrix.app.name }} application (Windows)
        env:
          RECORD_BIN: ${{ steps.setup_record.outputs.bin_name }}
          REPLAY_BIN: ${{ steps.setup_replay.outputs.bin_name }}
          SCRIPT_DIR: ${{ matrix.app.script_dir }}
        shell: pwsh
        run: |
          # Build the script path robustly
          $script = Join-Path $env:GITHUB_WORKSPACE ".github/workflows/test_workflow_scripts/golang/$env:SCRIPT_DIR/golang-docker-windows.ps1"

          Write-Host "Looking for script at: $script"
          if (!(Test-Path $script)) {
            Write-Host "::error::Script not found at expected path."
            Write-Host "Tree under .github/workflows/test_workflow_scripts:"
            Get-ChildItem -Recurse -File (Join-Path $env:GITHUB_WORKSPACE ".github/workflows/test_workflow_scripts") | ForEach-Object { $_.FullName }
            exit 1
          }

          # Ensure script can run
          Unblock-File $script

          # Move into the sample app directory so the script's relative paths (keploy.yml, etc.) are correct
          Set-Location "samples-go/${{ matrix.app.path }}"

          # Show where we are (useful for debugging)
          Write-Host "PWD:" (Get-Location)
          Write-Host "Running script..."
          & $script

      - name: Clean up git config
        if: always()
        continue-on-error: true
        run: git config --global --unset url."git@github.com:".insteadOf
