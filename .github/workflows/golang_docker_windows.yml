name: Golang On Docker (Windows)
on:
  workflow_call:

jobs:
  golang_docker_windows:
    runs-on: [self-hosted, Windows, X64]
    strategy:
      fail-fast: false
      matrix:
        app:
          - name: echo-sql
            path: echo-sql
            script_dir: echo_sql
        config:
          - job: record_build_replay_build
            record_src: build
            replay_src: build
          - job: record_build_replay_latest
            record_src: build
            replay_src: latest
          - job: record_latest_replay_build
            record_src: latest
            replay_src: build

    name: ${{ matrix.app.name }} (${{ matrix.config.job }}) (Windows)
    steps:

      - name: Prune Docker Builder Cache
        run: docker builder prune --all -f
        continue-on-error: true

      - name: Prune Docker Volumes
        run: docker volume prune -f
        continue-on-error: true

      - name: Clean up git config
        if: always()
        continue-on-error: true
        run: git config --global --unset url."git@github.com:".insteadOf

      - name: Checkout repository
        uses: actions/checkout@v4

      # --- CLI binaries (same as before) ---
      - name: Download Record Binary (${{ matrix.config.record_src }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.config.record_src }}
          path: record-bin

      - name: Install Record Binary
        id: setup_record
        shell: pwsh
        run: |
          New-Item -Path "./bin" -ItemType Directory -Force | Out-Null
          Move-Item -Path ".\record-bin\keploy.exe" -Destination ".\bin\keploy-record.exe" -Force
          echo "$env:GITHUB_WORKSPACE/bin" >> $env:GITHUB_PATH
          echo "bin_name=keploy-record.exe" >> $env:GITHUB_OUTPUT

      - name: Download Replay Binary (${{ matrix.config.replay_src }})
        uses: actions/download-artifact@v4
        with:
          name: ${{ matrix.config.replay_src }}
          path: replay-bin

      - name: Install Replay Binary
        id: setup_replay
        shell: pwsh
        run: |
          New-Item -Path "./bin" -ItemType Directory -Force | Out-Null
          Move-Item -Path ".\replay-bin\keploy.exe" -Destination ".\bin\keploy-replay.exe" -Force
          echo "bin_name=keploy-replay.exe" >> $env:GITHUB_OUTPUT

      # --- Docker images (NEW) ---
      - name: Download Record Docker image (${{ matrix.config.record_src }})
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.config.record_src }}
          path: record-image

      - name: Load & Tag Record Docker image
        id: record_img
        shell: pwsh
        run: |
          $tar = Get-ChildItem .\record-image\*.tar | Select-Object -First 1
          if (-not $tar) { throw "Record image tar not found." }
          docker load -i $tar.FullName | Write-Output

          # Prefer PR-tagged image; else use the newest ghcr.io/keploy/keploy:* we just loaded
          $cand = (docker images --format "{{.Repository}}:{{.Tag}}" ghcr.io/keploy/keploy) `
                    | Select-String "pr-" -SimpleMatch | Select-Object -First 1
          if ($cand) {
            docker tag $cand keploy:record
          } else {
            $first = (docker images ghcr.io/keploy/keploy --format "{{.Repository}}:{{.Tag}}" `
                      | Select-Object -First 1)
            if (-not $first) { throw "No ghcr.io/keploy/keploy image found after load (record)." }
            docker tag $first keploy:record
          }

          # ALWAYS also tag the fallback that Keploy defaults to if env var is missed
          docker tag keploy:record ghcr.io/keploy/keploy:v2-dev

          # Sanity
          docker images --format "{{.Repository}}:{{.Tag}}" | findstr /I "keploy:record ghcr.io/keploy/keploy:v2-dev"

          echo "image=keploy:record" >> $env:GITHUB_OUTPUT


      - name: Download Replay Docker image (${{ matrix.config.replay_src }})
        uses: actions/download-artifact@v4
        with:
          name: docker-${{ matrix.config.replay_src }}
          path: replay-image

      - name: Load & Tag Replay Docker image
        id: replay_img
        shell: pwsh
        run: |
          $tar = Get-ChildItem .\replay-image\*.tar | Select-Object -First 1
          if (-not $tar) { throw "Replay image tar not found." }
          docker load -i $tar.FullName | Write-Output

          $cand = (docker images --format "{{.Repository}}:{{.Tag}}" ghcr.io/keploy/keploy) `
                    | Select-String "pr-" -SimpleMatch | Select-Object -First 1
          if ($cand) {
            docker tag $cand keploy:replay
          } else {
            $first = (docker images ghcr.io/keploy/keploy --format "{{.Repository}}:{{.Tag}}" `
                      | Select-Object -First 1)
            if (-not $first) { throw "No ghcr.io/keploy/keploy image found after load (replay)." }
            docker tag $first keploy:replay
          }

          # ALWAYS add the fallback tag too (belt-and-suspenders)
          docker tag keploy:replay ghcr.io/keploy/keploy:v2-dev

          docker images --format "{{.Repository}}:{{.Tag}}" | findstr /I "keploy:replay ghcr.io/keploy/keploy:v2-dev"

          echo "image=keploy:replay" >> $env:GITHUB_OUTPUT

      # Samples repo
      - name: Checkout the samples-go repository
        uses: actions/checkout@v4
        with:
          repository: keploy/samples-go
          path: samples-go

      - name: Docker works?
        run: |
          docker version
          docker run --rm hello-world

      - name: Run ${{ matrix.app.name }} application (Windows)
        env:
          RECORD_BIN:  ${{ steps.setup_record.outputs.bin_name }}
          REPLAY_BIN:  ${{ steps.setup_replay.outputs.bin_name }}
          # NEW: pass the image tags to your script
          DOCKER_IMAGE_RECORD: ${{ steps.record_img.outputs.image }}
          DOCKER_IMAGE_REPLAY: ${{ steps.replay_img.outputs.image }}
        shell: pwsh
        run: |
          cd samples-go/${{ matrix.app.path }}
          & "$env:GITHUB_WORKSPACE\.github\workflows\test_workflow_scripts\golang\${{ matrix.app.script_dir }}\golang-docker-windows.ps1"

      - name: Clean up git config
        if: always()
        continue-on-error: true
        run: git config --global --unset url."git@github.com:".insteadOf
