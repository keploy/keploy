// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: pkg/models/keploy.proto

package models

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	KeployInstance_Record_FullMethodName = "/models.KeployInstance/Record"
	KeployInstance_Mock_FullMethodName   = "/models.KeployInstance/Mock"
)

// KeployInstanceClient is the client API for KeployInstance service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type KeployInstanceClient interface {
	Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error)
	Mock(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockReply, error)
}

type keployInstanceClient struct {
	cc grpc.ClientConnInterface
}

func NewKeployInstanceClient(cc grpc.ClientConnInterface) KeployInstanceClient {
	return &keployInstanceClient{cc}
}

func (c *keployInstanceClient) Record(ctx context.Context, in *RecordRequest, opts ...grpc.CallOption) (*RecordReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RecordReply)
	err := c.cc.Invoke(ctx, KeployInstance_Record_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *keployInstanceClient) Mock(ctx context.Context, in *MockRequest, opts ...grpc.CallOption) (*MockReply, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MockReply)
	err := c.cc.Invoke(ctx, KeployInstance_Mock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// KeployInstanceServer is the server API for KeployInstance service.
// All implementations must embed UnimplementedKeployInstanceServer
// for forward compatibility.
type KeployInstanceServer interface {
	Record(context.Context, *RecordRequest) (*RecordReply, error)
	Mock(context.Context, *MockRequest) (*MockReply, error)
	mustEmbedUnimplementedKeployInstanceServer()
}

// UnimplementedKeployInstanceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedKeployInstanceServer struct{}

func (UnimplementedKeployInstanceServer) Record(context.Context, *RecordRequest) (*RecordReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Record not implemented")
}
func (UnimplementedKeployInstanceServer) Mock(context.Context, *MockRequest) (*MockReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Mock not implemented")
}
func (UnimplementedKeployInstanceServer) mustEmbedUnimplementedKeployInstanceServer() {}
func (UnimplementedKeployInstanceServer) testEmbeddedByValue()                        {}

// UnsafeKeployInstanceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to KeployInstanceServer will
// result in compilation errors.
type UnsafeKeployInstanceServer interface {
	mustEmbedUnimplementedKeployInstanceServer()
}

func RegisterKeployInstanceServer(s grpc.ServiceRegistrar, srv KeployInstanceServer) {
	// If the following call pancis, it indicates UnimplementedKeployInstanceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&KeployInstance_ServiceDesc, srv)
}

func _KeployInstance_Record_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeployInstanceServer).Record(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeployInstance_Record_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeployInstanceServer).Record(ctx, req.(*RecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _KeployInstance_Mock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(KeployInstanceServer).Mock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: KeployInstance_Mock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(KeployInstanceServer).Mock(ctx, req.(*MockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// KeployInstance_ServiceDesc is the grpc.ServiceDesc for KeployInstance service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var KeployInstance_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "models.KeployInstance",
	HandlerType: (*KeployInstanceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Record",
			Handler:    _KeployInstance_Record_Handler,
		},
		{
			MethodName: "Mock",
			Handler:    _KeployInstance_Mock_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/models/keploy.proto",
}
