// Code generated by bpf2go; DO NOT EDIT.
//go:build arm64

package linux

import (
	"bytes"
	_ "embed"
	"fmt"
	"io"

	"github.com/cilium/ebpf"
)

// loadBpf returns the embedded CollectionSpec for bpf.
func loadBpf() (*ebpf.CollectionSpec, error) {
	reader := bytes.NewReader(_BpfBytes)
	spec, err := ebpf.LoadCollectionSpecFromReader(reader)
	if err != nil {
		return nil, fmt.Errorf("can't load bpf: %w", err)
	}

	return spec, err
}

// loadBpfObjects loads bpf and converts it into a struct.
//
// The following types are suitable as obj argument:
//
//	*bpfObjects
//	*bpfPrograms
//	*bpfMaps
//
// See ebpf.CollectionSpec.LoadAndAssign documentation for details.
func loadBpfObjects(obj interface{}, opts *ebpf.CollectionOptions) error {
	spec, err := loadBpf()
	if err != nil {
		return err
	}

	return spec.LoadAndAssign(obj, opts)
}

// bpfSpecs contains maps and programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfSpecs struct {
	bpfProgramSpecs
	bpfMapSpecs
	bpfVariableSpecs
}

// bpfProgramSpecs contains programs before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfProgramSpecs struct {
	K_bind4                       *ebpf.ProgramSpec `ebpf:"k_bind4"`
	K_bind6                       *ebpf.ProgramSpec `ebpf:"k_bind6"`
	K_connect4                    *ebpf.ProgramSpec `ebpf:"k_connect4"`
	K_connect6                    *ebpf.ProgramSpec `ebpf:"k_connect6"`
	K_getpeername4                *ebpf.ProgramSpec `ebpf:"k_getpeername4"`
	K_getpeername6                *ebpf.ProgramSpec `ebpf:"k_getpeername6"`
	SyscallProbeEntryTcpV4Connect *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_tcp_v4_connect"`
	SyscallProbeEntryTcpV6Connect *ebpf.ProgramSpec `ebpf:"syscall__probe_entry_tcp_v6_connect"`
	SyscallProbeRetTcpV4Connect   *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_tcp_v4_connect"`
	SyscallProbeRetTcpV6Connect   *ebpf.ProgramSpec `ebpf:"syscall__probe_ret_tcp_v6_connect"`
	SyscallProbeEntrySocket       *ebpf.ProgramSpec `ebpf:"syscall_probe_entry_socket"`
}

// bpfMapSpecs contains maps before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfMapSpecs struct {
	AppPortInfo                 *ebpf.MapSpec `ebpf:"app_port_info"`
	BindEvents                  *ebpf.MapSpec `ebpf:"bind_events"`
	CurrentSockMap              *ebpf.MapSpec `ebpf:"current_sock_map"`
	DestInfoMap                 *ebpf.MapSpec `ebpf:"dest_info_map"`
	KeployAgentKernelPidMap     *ebpf.MapSpec `ebpf:"keploy_agent_kernel_pid_map"`
	KeployAgentRegistrationMap  *ebpf.MapSpec `ebpf:"keploy_agent_registration_map"`
	KeployClientKernelPidMap    *ebpf.MapSpec `ebpf:"keploy_client_kernel_pid_map"`
	KeployClientRegistrationMap *ebpf.MapSpec `ebpf:"keploy_client_registration_map"`
	RedirectProxyMap            *ebpf.MapSpec `ebpf:"redirect_proxy_map"`
	TargetNamespacePids         *ebpf.MapSpec `ebpf:"target_namespace_pids"`
}

// bpfVariableSpecs contains global variables before they are loaded into the kernel.
//
// It can be passed ebpf.CollectionSpec.Assign.
type bpfVariableSpecs struct {
}

// bpfObjects contains all objects after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfObjects struct {
	bpfPrograms
	bpfMaps
	bpfVariables
}

func (o *bpfObjects) Close() error {
	return _BpfClose(
		&o.bpfPrograms,
		&o.bpfMaps,
	)
}

// bpfMaps contains all maps after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfMaps struct {
	AppPortInfo                 *ebpf.Map `ebpf:"app_port_info"`
	BindEvents                  *ebpf.Map `ebpf:"bind_events"`
	CurrentSockMap              *ebpf.Map `ebpf:"current_sock_map"`
	DestInfoMap                 *ebpf.Map `ebpf:"dest_info_map"`
	KeployAgentKernelPidMap     *ebpf.Map `ebpf:"keploy_agent_kernel_pid_map"`
	KeployAgentRegistrationMap  *ebpf.Map `ebpf:"keploy_agent_registration_map"`
	KeployClientKernelPidMap    *ebpf.Map `ebpf:"keploy_client_kernel_pid_map"`
	KeployClientRegistrationMap *ebpf.Map `ebpf:"keploy_client_registration_map"`
	RedirectProxyMap            *ebpf.Map `ebpf:"redirect_proxy_map"`
	TargetNamespacePids         *ebpf.Map `ebpf:"target_namespace_pids"`
}

func (m *bpfMaps) Close() error {
	return _BpfClose(
		m.AppPortInfo,
		m.BindEvents,
		m.CurrentSockMap,
		m.DestInfoMap,
		m.KeployAgentKernelPidMap,
		m.KeployAgentRegistrationMap,
		m.KeployClientKernelPidMap,
		m.KeployClientRegistrationMap,
		m.RedirectProxyMap,
		m.TargetNamespacePids,
	)
}

// bpfVariables contains all global variables after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfVariables struct {
}

// bpfPrograms contains all programs after they have been loaded into the kernel.
//
// It can be passed to loadBpfObjects or ebpf.CollectionSpec.LoadAndAssign.
type bpfPrograms struct {
	K_bind4                       *ebpf.Program `ebpf:"k_bind4"`
	K_bind6                       *ebpf.Program `ebpf:"k_bind6"`
	K_connect4                    *ebpf.Program `ebpf:"k_connect4"`
	K_connect6                    *ebpf.Program `ebpf:"k_connect6"`
	K_getpeername4                *ebpf.Program `ebpf:"k_getpeername4"`
	K_getpeername6                *ebpf.Program `ebpf:"k_getpeername6"`
	SyscallProbeEntryTcpV4Connect *ebpf.Program `ebpf:"syscall__probe_entry_tcp_v4_connect"`
	SyscallProbeEntryTcpV6Connect *ebpf.Program `ebpf:"syscall__probe_entry_tcp_v6_connect"`
	SyscallProbeRetTcpV4Connect   *ebpf.Program `ebpf:"syscall__probe_ret_tcp_v4_connect"`
	SyscallProbeRetTcpV6Connect   *ebpf.Program `ebpf:"syscall__probe_ret_tcp_v6_connect"`
	SyscallProbeEntrySocket       *ebpf.Program `ebpf:"syscall_probe_entry_socket"`
}

func (p *bpfPrograms) Close() error {
	return _BpfClose(
		p.K_bind4,
		p.K_bind6,
		p.K_connect4,
		p.K_connect6,
		p.K_getpeername4,
		p.K_getpeername6,
		p.SyscallProbeEntryTcpV4Connect,
		p.SyscallProbeEntryTcpV6Connect,
		p.SyscallProbeRetTcpV4Connect,
		p.SyscallProbeRetTcpV6Connect,
		p.SyscallProbeEntrySocket,
	)
}

func _BpfClose(closers ...io.Closer) error {
	for _, closer := range closers {
		if err := closer.Close(); err != nil {
			return err
		}
	}
	return nil
}

// Do not access this directly.
//
//go:embed bpf_arm64_bpfel.o
var _BpfBytes []byte
