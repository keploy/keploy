// Code generated by mockery v2.53.2. DO NOT EDIT.

package tools

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "go.keploy.io/server/v2/pkg/models"
)

// MockTestDB is an autogenerated mock type for the TestDB type
type MockTestDB struct {
	mock.Mock
}

// DeleteTestSet provides a mock function with given fields: ctx, testSetID
func (_m *MockTestDB) DeleteTestSet(ctx context.Context, testSetID string) error {
	ret := _m.Called(ctx, testSetID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTestSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, testSetID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTests provides a mock function with given fields: ctx, testSetID, testCaseIDs
func (_m *MockTestDB) DeleteTests(ctx context.Context, testSetID string, testCaseIDs []string) error {
	ret := _m.Called(ctx, testSetID, testCaseIDs)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTests")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, testSetID, testCaseIDs)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetAllTestSetIDs provides a mock function with given fields: ctx
func (_m *MockTestDB) GetAllTestSetIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTestSetIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTestCases provides a mock function with given fields: ctx, testSetID
func (_m *MockTestDB) GetTestCases(ctx context.Context, testSetID string) ([]*models.TestCase, error) {
	ret := _m.Called(ctx, testSetID)

	if len(ret) == 0 {
		panic("no return value specified for GetTestCases")
	}

	var r0 []*models.TestCase
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]*models.TestCase, error)); ok {
		return rf(ctx, testSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []*models.TestCase); ok {
		r0 = rf(ctx, testSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*models.TestCase)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTestCase provides a mock function with given fields: ctx, testCase, testSetID, enableLog
func (_m *MockTestDB) UpdateTestCase(ctx context.Context, testCase *models.TestCase, testSetID string, enableLog bool) error {
	ret := _m.Called(ctx, testCase, testSetID, enableLog)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTestCase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *models.TestCase, string, bool) error); ok {
		r0 = rf(ctx, testCase, testSetID, enableLog)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTestDB creates a new instance of MockTestDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestDB {
	mock := &MockTestDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
