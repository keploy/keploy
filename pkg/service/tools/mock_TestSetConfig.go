// Code generated by mockery v2.53.2. DO NOT EDIT.

package tools

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "go.keploy.io/server/v2/pkg/models"
)

// MockTestSetConfig is an autogenerated mock type for the TestSetConfig type
type MockTestSetConfig struct {
	mock.Mock
}

// Read provides a mock function with given fields: ctx, testSetID
func (_m *MockTestSetConfig) Read(ctx context.Context, testSetID string) (*models.TestSet, error) {
	ret := _m.Called(ctx, testSetID)

	if len(ret) == 0 {
		panic("no return value specified for Read")
	}

	var r0 *models.TestSet
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*models.TestSet, error)); ok {
		return rf(ctx, testSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *models.TestSet); ok {
		r0 = rf(ctx, testSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TestSet)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ReadSecret provides a mock function with given fields: ctx, testSetID
func (_m *MockTestSetConfig) ReadSecret(ctx context.Context, testSetID string) (map[string]interface{}, error) {
	ret := _m.Called(ctx, testSetID)

	if len(ret) == 0 {
		panic("no return value specified for ReadSecret")
	}

	var r0 map[string]interface{}
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (map[string]interface{}, error)); ok {
		return rf(ctx, testSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) map[string]interface{}); ok {
		r0 = rf(ctx, testSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[string]interface{})
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, testSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Write provides a mock function with given fields: ctx, testSetID, testSet
func (_m *MockTestSetConfig) Write(ctx context.Context, testSetID string, testSet *models.TestSet) error {
	ret := _m.Called(ctx, testSetID, testSet)

	if len(ret) == 0 {
		panic("no return value specified for Write")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *models.TestSet) error); ok {
		r0 = rf(ctx, testSetID, testSet)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockTestSetConfig creates a new instance of MockTestSetConfig. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTestSetConfig(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTestSetConfig {
	mock := &MockTestSetConfig{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
