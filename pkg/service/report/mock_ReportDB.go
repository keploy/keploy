// Code generated by mockery v2.53.2. DO NOT EDIT.

package report

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
	models "go.keploy.io/server/v2/pkg/models"
)

// MockReportDB is an autogenerated mock type for the ReportDB type
type MockReportDB struct {
	mock.Mock
}

// GetAllTestRunIDs provides a mock function with given fields: ctx
func (_m *MockReportDB) GetAllTestRunIDs(ctx context.Context) ([]string, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetAllTestRunIDs")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]string, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []string); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReport provides a mock function with given fields: ctx, testRunID, testSetID
func (_m *MockReportDB) GetReport(ctx context.Context, testRunID string, testSetID string) (*models.TestReport, error) {
	ret := _m.Called(ctx, testRunID, testSetID)

	if len(ret) == 0 {
		panic("no return value specified for GetReport")
	}

	var r0 *models.TestReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*models.TestReport, error)); ok {
		return rf(ctx, testRunID, testSetID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *models.TestReport); ok {
		r0 = rf(ctx, testRunID, testSetID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*models.TestReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, testRunID, testSetID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockReportDB creates a new instance of MockReportDB. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockReportDB(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockReportDB {
	mock := &MockReportDB{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
