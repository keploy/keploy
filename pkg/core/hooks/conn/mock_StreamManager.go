// Code generated by mockery v2.53.2. DO NOT EDIT.

package conn

import (
	mock "github.com/stretchr/testify/mock"
	http2 "golang.org/x/net/http2"

	pkg "go.keploy.io/server/v2/pkg"

	time "time"
)

// MockStreamManager is an autogenerated mock type for the StreamManager type
type MockStreamManager struct {
	mock.Mock
}

// CleanupStream provides a mock function with given fields: streamID
func (_m *MockStreamManager) CleanupStream(streamID uint32) {
	_m.Called(streamID)
}

// GetCompleteStreams provides a mock function with no fields
func (_m *MockStreamManager) GetCompleteStreams() []*pkg.HTTP2Stream {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetCompleteStreams")
	}

	var r0 []*pkg.HTTP2Stream
	if rf, ok := ret.Get(0).(func() []*pkg.HTTP2Stream); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*pkg.HTTP2Stream)
		}
	}

	return r0
}

// HandleFrame provides a mock function with given fields: frame, isOutgoing, timestamp
func (_m *MockStreamManager) HandleFrame(frame http2.Frame, isOutgoing bool, timestamp time.Time) error {
	ret := _m.Called(frame, isOutgoing, timestamp)

	if len(ret) == 0 {
		panic("no return value specified for HandleFrame")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(http2.Frame, bool, time.Time) error); ok {
		r0 = rf(frame, isOutgoing, timestamp)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockStreamManager creates a new instance of MockStreamManager. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockStreamManager(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockStreamManager {
	mock := &MockStreamManager{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
