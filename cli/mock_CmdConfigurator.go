// Code generated by mockery v2.53.2. DO NOT EDIT.

package cli

import (
	context "context"

	cobra "github.com/spf13/cobra"

	mock "github.com/stretchr/testify/mock"
)

// MockCmdConfigurator is an autogenerated mock type for the CmdConfigurator type
type MockCmdConfigurator struct {
	mock.Mock
}

// AddFlags provides a mock function with given fields: cmd
func (_m *MockCmdConfigurator) AddFlags(cmd *cobra.Command) error {
	ret := _m.Called(cmd)

	if len(ret) == 0 {
		panic("no return value specified for AddFlags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*cobra.Command) error); ok {
		r0 = rf(cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Validate provides a mock function with given fields: ctx, cmd
func (_m *MockCmdConfigurator) Validate(ctx context.Context, cmd *cobra.Command) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for Validate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cobra.Command) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateFlags provides a mock function with given fields: ctx, cmd
func (_m *MockCmdConfigurator) ValidateFlags(ctx context.Context, cmd *cobra.Command) error {
	ret := _m.Called(ctx, cmd)

	if len(ret) == 0 {
		panic("no return value specified for ValidateFlags")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *cobra.Command) error); ok {
		r0 = rf(ctx, cmd)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewMockCmdConfigurator creates a new instance of MockCmdConfigurator. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockCmdConfigurator(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockCmdConfigurator {
	mock := &MockCmdConfigurator{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
