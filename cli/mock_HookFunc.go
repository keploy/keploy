// Code generated by mockery v2.53.2. DO NOT EDIT.

package cli

import (
	cobra "github.com/spf13/cobra"
	config "go.keploy.io/server/v2/config"

	context "context"

	mock "github.com/stretchr/testify/mock"

	zap "go.uber.org/zap"
)

// MockHookFunc is an autogenerated mock type for the HookFunc type
type MockHookFunc struct {
	mock.Mock
}

// Execute provides a mock function with given fields: _a0, _a1, _a2, _a3, _a4
func (_m *MockHookFunc) Execute(_a0 context.Context, _a1 *zap.Logger, _a2 *config.Config, _a3 ServiceFactory, _a4 CmdConfigurator) *cobra.Command {
	ret := _m.Called(_a0, _a1, _a2, _a3, _a4)

	if len(ret) == 0 {
		panic("no return value specified for Execute")
	}

	var r0 *cobra.Command
	if rf, ok := ret.Get(0).(func(context.Context, *zap.Logger, *config.Config, ServiceFactory, CmdConfigurator) *cobra.Command); ok {
		r0 = rf(_a0, _a1, _a2, _a3, _a4)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*cobra.Command)
		}
	}

	return r0
}

// NewMockHookFunc creates a new instance of MockHookFunc. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockHookFunc(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockHookFunc {
	mock := &MockHookFunc{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
